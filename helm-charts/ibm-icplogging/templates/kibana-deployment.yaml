{{- if .Values.kibana.install -}}
#
# Copyright 2020 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{ template "elk.settings.all.prepare" . -}}
{{ template "apiVersionTryV1" .  }} #tagged for NoDeprecatedAPIs (v1beta2), not really sure what this template value is
kind: Deployment
metadata:
  labels:
    app: "{{ template "elasticsearch.fullname" . }}"
    component: "{{ .Values.kibana.name }}"
    release: "{{ .Release.Name }}"
    role: "kibana"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/instance: common-logging
    app.kubernetes.io/managed-by: elasticstacks.elasticstack.ibm.com
    app.kubernetes.io/name: "{{ template "elasticsearch.fullname" . }}"
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  name: "{{ template "kibana.fullname" . }}"
spec:
  selector:
    matchLabels:
      app: "{{ template "elasticsearch.fullname" . }}"
      component: "{{ .Values.kibana.name }}"
      release: "{{ .Release.Name }}"
      role: "kibana"
      heritage: "{{ .Release.Service }}"
  replicas: {{ .Values.kibana.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: "{{ template "elasticsearch.fullname" . }}"
        component: "{{ .Values.kibana.name }}"
        role: "kibana"
        release: "{{ .Release.Name }}"
        chart: "{{ .Chart.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/instance: "common-logging"
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        productName: "IBM Cloud Platform Common Services"
        productID: "068a62892a1e4db39641342e592daa25"
        productVersion: "3.3.0"
        productMetric: "FREE"
        clusterhealth.ibm.com/dependencies: auth-idp, auth-pap, auth-pdp
    spec:
{{ include "image.pullSecret" . | indent 6 }}
{{- if .Values.kibana.tolerations }}
      tolerations:
{{ toYaml .Values.kibana.tolerations | indent 6 }}
{{- end }}
{{- if .Values.kibana.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.kibana.nodeSelector | indent 8 }}
{{- end }}
      # Required for multi-platform config
      securityContext:
        fsGroup: 1000
      #Also part of PodSecurityContext
      # hostNetwork: false
      # hostPID: false
      # hostIPC: false
      serviceAccountName: "{{ template "kibana.fullname" . }}"
      #PodHasNodeBasedArchAffinity
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                  - amd64
                  - ppc64le
                  - s390x
      containers:
{{- if .Values.kibana.routerEnabled }}
      - name: router
        securityContext: #Needs the commented values for PodSecurityContextDefined & ContainerHasDropAll
          allowPrivilegeEscalation: false
          #readOnlyRootFilesystem: true
          #capabilities:
          #  drop:
          #  - ALL
          #privileged: false
          #runAsUser: 1001
          #runAsNonRoot: true
        resources: #cpu defined ContainerDefinesResources
{{ toYaml .Values.kibana.routerImage.resources | indent 12 }}
        image: {{ .Values.kibana.routerImage.repository }}:{{ .Values.kibana.routerImage.tag }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command: ["nginx"]
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_DOMAIN
          value: "{{ template "clusterDomain" . }}"
        - name: CLUSTER_NAME
          value: "{{ template "clusterName" . }}"
        - name: AUTHORIZED_NAMESPACES
{{- if .Values.kibana.security.authz.icp.authorizedNamespaces }}
          value: '{{ toJson .Values.kibana.security.authz.icp.authorizedNamespaces }}'
{{- end }}
        - name: CLIENT_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "kibana.fullname" . }}-nginx
              key: client-api-key
        - name: WLP_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: platform-oidc-credentials
              key: WLP_CLIENT_ID
        ports:
        - name: router
          containerPort: {{ .Values.general.ingressPort }}
        volumeMounts:
        - name: router-config
          mountPath: "/opt/ibm/router/nginx/conf/nginx.conf"
          subPath: nginx.conf
        - name: router-scripts
          mountPath: "/opt/ibm/router/nginx/conf/rbac"
        - name: certs
          mountPath: "/opt/ibm/router/certs"
        - name: cert-passphrases
          mountPath: "/opt/ibm/router/tls-pass"
          readOnly: true
{{- end }}
      - name: kibana
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
          runAsNonRoot: true
        image: {{ .Values.kibana.image.repository }}:{{ .Values.kibana.image.tag }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command: ["/bin/bash", "/scripts/entrypoint.sh"]
{{- if not .Values.kibana.routerEnabled }}
        ports:
        - containerPort: {{ .Values.kibana.internal }}
          name: ui
{{- end }}
        volumeMounts:
        - name: config
          mountPath: /usr/share/kibana/config
        - name: cache
          mountPath: /usr/share/kibana/optimize
        - name: entrypoint
          mountPath: /scripts
{{- if or .Values.kibana.routerEnabled (or .Values.elasticsearch.security.authc.enabled .Values.kibana.https) }}
        - name: certs
          mountPath: "/usr/share/elasticsearch/config/tls"
          readOnly: true
{{- end }}
        resources:
          limits:
            memory: {{ .Values.kibana.memoryLimit }} #cpu defined ContainerDefinesResources, requests defined
        env:
        - name: "NODE_OPTIONS"
          value: "--max-old-space-size={{ .Values.kibana.maxOldSpaceSize }}"
        - name: CFG_BASEDIR
          value: /usr/share/kibana
{{- if or .Values.elasticsearch.security.authc.enabled .Values.kibana.https }}
        - name: CA_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "elasticsearch.fullname" . }}-pki-secret
              key: caTruststorePassword
        - name: SERVER_SSL_KEYPASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ template "elasticsearch.fullname" . }}-pki-secret
              key: appKeystorePassword
{{- end }}
      volumes:
        - name: cache
          emptyDir:
            medium: ""
        - name: config
          configMap:
            name: {{ template "kibana.fullname" . }}-config
            items:
              - key: kibana.yml
                path: kibana.yml
        - name: entrypoint
          configMap:
            name: {{ template "elasticsearch.fullname" . }}-entrypoint
            defaultMode: 365
            items:
              - key: kibana-entrypoint.sh
                path: entrypoint.sh
              - key: map-config.sh
                path: map-config.sh
{{- if .Values.kibana.routerEnabled }}
        - name: router-config
          configMap:
            name: {{ template "kibana.fullname" . }}-nginx
        - name: router-scripts
          configMap:
            name: {{ template "router.fullname" . }}-scripts
            defaultMode: 0744
{{- end }}
{{- if or .Values.kibana.routerEnabled (or .Values.elasticsearch.security.authc.enabled .Values.kibana.https) }}
        - name: certs
          secret:
            secretName: {{ template "fullname" . }}-certs
        - name: cert-passphrases
          secret:
            secretName: {{ template "elasticsearch.fullname" . }}-pki-secret
{{- end }}
        - name: migration-check-entrypoint
          configMap:
            name: {{ template "kibana.fullname" . }}-migration-check-entrypoint
            defaultMode: 0777
      restartPolicy: Always
{{- end}}
